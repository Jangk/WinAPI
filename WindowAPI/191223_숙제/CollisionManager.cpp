#include "pch.h"
#include "CollisionManager.h"
#include "GameObject.h"

void CollisionManager::CollisionRect(OBJECT_LIST& dstList, OBJECT_LIST& srcList)
{
	for (auto pDest : dstList)
	{
		for (auto pSrc : srcList)
		{
			RECT rc = {};

			// 두 사각형이 교차되었는지 판별하는 함수. 교차됐으면 TRUE, 아니면 FALSE 반환.
			// 두 사각형이 교차되었을 때 겹친 영역에 또다른 사각형이 만들어진다. 
			// 이 겹친 사각형을 첫번째 인자로 반환한다
			if (IntersectRect(&rc, &pDest->GetRect(), &pSrc->GetRect()))
			{
				pDest->IsDead();
				pSrc->IsDead();
			}
		}
	}
}

void CollisionManager::CollisionSphere(OBJECT_LIST& dstList, OBJECT_LIST& srcList)
{
	for (auto pDest : dstList)
	{
		for (auto pSrc : srcList)
		{
			if (IntersectSphere(pDest, pSrc))
			{
				pDest->IsDead();
				pSrc->IsDead();
			}
		}
	}
}

bool CollisionManager::IntersectSphere(GameObject* pDest, GameObject* pSource)
{
	// 원충돌
	// 두 원의 반지름 합을 구한다. r1 + r2
	// 두 원의 중점 간 거리를 구한다. d
	// r1 + r2 >= d 조건을 만족하면 TRUE

	float r1 = pDest->GetInfo().fWidth * 0.5f;
	float r2 = pSource->GetInfo().fWidth * 0.5f;

	float w = pDest->GetInfo().fX - pSource->GetInfo().fX;
	float h = pDest->GetInfo().fY - pSource->GetInfo().fY;

	// sqrtf: 제곱근 구하는 함수. <cmath>에서 제공.
	float d = sqrtf(w * w + h * h);

	return r1 + r2 >= d;
}	
